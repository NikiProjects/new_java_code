package packPolynomial;

/**
 *
 * @author Jaya
 */
public class PolynomialUI extends javax.swing.JFrame 
{

    
    private static double valueCoefficient;  
    private static double valueVariable;
    private static double valueExponent;
    private static double highestDegree;
// All the monomial values are needed to make up the polynomial.
    private static double[] monomialValue = new double[100];
// This program stores the monomial values in an array. 
// Exponent values, coefficient values, are needed to find the values of the monomials.  
    private static double[] exponentArr = new double[100];
    private static double[] coefficientValues = new double [100];
    private static double[] valueCoefficient0 = new double[100];
   
    public PolynomialUI(double[] coefficientValues, double highestDegree, double valueCoefficient, double[] valueCoefficient0, double valueVariable, double valueExponent, double[] monomialValue) 
    {
        initComponents();
// The instance variables get initialized to the values entered by the user.
 
// The two constructors do not call a superclass constructor. So there is no issue of superclass 
//constructor calling a method that is overrideable.
// So there's no issue of calling a subclass method before intitialization can take place.  

// Instance variables are initialized thru set methods declared below. 

// The parameter values in the set methods correspond to parameter values passed in the constructor.
        setArrCoefficients0(valueCoefficient0);
        setArrCoefficientValues(coefficientValues);
        setMonomialValueArr(monomialValue);

        setValueCoefficient(valueCoefficient);
        setValueVariable(valueVariable);
        setValueExponent(valueExponent);

        setHighestDegree(highestDegree);
    } // end constructor
   
 // Set methods initialize array variables as well as fields. 
   
    public void setArrCoefficientValues(double[] coefficientValues)
    {
        this.coefficientValues = coefficientValues;
    }   

    public void setExponentArr(double[] exponentArr)
    {
        this.exponentArr = exponentArr;
    }   
    
    public void setArrCoefficients0(double[] valueCoefficient0)
    {
        this.valueCoefficient0 = valueCoefficient0;
    }    
   
    public void setHighestDegree(double highestDegree)
    {    
        this.highestDegree = highestDegree;
    }
   
   
   
    public void setMonomialValueArr(double[] monomialValue)
    {      
        this.monomialValue = monomialValue;
    }
    
    public void setValueCoefficient(double valueCoefficient)
    {   
        this.valueCoefficient = valueCoefficient;
    }
   
    public void setValueVariable(double valueVariable)
    {
        this.valueVariable = valueVariable;
    }  
   
 // Below is an example of validation taking place in a set method.   
    public void setValueExponent(double valueExponent)
    {
       if(valueExponent < 0.0)
           throw new IllegalArgumentException("Value of exponent must be >= 0");
         this.valueExponent = valueExponent;
    }    
   
   /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Enter the value of your variable:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Enter the coefficient for the monomial: ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Enter the value of the exponent:");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jButton1.setText("Evaluate Monomial Value");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Enter Next Monomial");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Evaluate Polynomial Value");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Press to enter new polynomial");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Degree of the Polynomial: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("List of set constant values: ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addContainerGap(232, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jButton2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 175, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(jLabel4))
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        
  
    private int counter = -1;
  
//Code below is the code that gets executed when Button1 is pressed.  
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
// Everytime Button1 is pressed the value of counter increases.       
        counter++;
        
// Values entered in the text fields are placed in memory held by the instance variables.       
// When the monomial button is pressed in the calculator, memory is allocated for the following values.         
        valueCoefficient = Double.parseDouble(jTextField2.getText());
        valueVariable = Double.parseDouble(jTextField1.getText());
        valueExponent = Double.parseDouble(jTextField3.getText());
 
// Next, set methods are called to assign values to the instance variables.           
        setValueExponent(valueExponent);
 
        
        setValueCoefficient(valueCoefficient);
        setValueVariable(valueVariable);
        
        double evalExponent = Math.pow(valueVariable, valueExponent);

// Method setConstant assigns values to array called coefficientValues.
// Array coefficientsValues gets displayed in calculator.         
        if(valueCoefficient != 0)
            setConstant(counter, valueCoefficient); 
    
// Values of 0 are assigned to variable valueCoefficient. These values get stored in a different array called setArrCoefficients0. 
        if(valueCoefficient == 0)
            valueCoefficient0[counter] = valueCoefficient; 
// So everytime the button is pressed, array valueCoefficient0 gets an assignment called valueCoefficient if  
// variable valueCoefficient is equal to 0. 

        setArrCoefficients0(valueCoefficient0);
        
        exponentArr[counter] = valueExponent;
        setExponentArr(exponentArr);
        
        monomialValue[counter] = evalExponent * valueCoefficient;
 // Array monomial value is intialized with the values calculated here.         
        setMonomialValueArr(monomialValue);
// Field jTextField5 outputs the value of the monomial.         
        jTextField5.setText(String.valueOf((evalExponent * valueCoefficient)));
  
         
    }                                        


//Method below returns the degree of the polynomial.
//Method setHighestDegree is called from method named highestDegree. 
// Method highestDegree is called by pressing the button that evaluates polynomial value.   
    
double highestDegree()
{
// This method finds the highest degree within the polynomial.      
// Next, one array element is being compared to all the other array elements.  
// Variable counter represents the length of the monomial array.    
    int storeIndex;
    for(int arrayIndex = 0; arrayIndex <= counter; arrayIndex++)
    {
        storeIndex = arrayIndex;
            
        for(int arrIndex = 0; arrIndex <= counter; arrIndex++)
        {
                if(storeIndex != arrIndex)
                {
                    if (exponentArr[arrayIndex] > exponentArr[arrIndex])
                        highestDegree = exponentArr[arrayIndex];
                    if(exponentArr[arrIndex] > exponentArr[arrayIndex])
                        highestDegree = exponentArr[arrIndex];
                }
        }
      }
    setHighestDegree(highestDegree);  
// Since the value of highestDegree has been found, it can be assigned as a parameter in the set method. 

    return highestDegree;
}

// Below, counter is representing the number of non-zero coefficients in the polynomial. 
public void setConstant(int index, double valueCoefficient)
    {
        String stringCoefficientValues = "string";
// Next, values are assigned to the individual elements in the array. 
// This method is called every time the monomial button is pressed. 
        coefficientValues[counter] = valueCoefficient; 
        setArrCoefficientValues(coefficientValues);


        for(index = 0; index <= counter; index++ )
            stringCoefficientValues = String.valueOf(coefficientValues[index]) + ", ";

        int pos = jTextArea1.getCaretPosition();
        jTextArea1.insert(stringCoefficientValues, pos);

      }

    private double total = 0;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
     
 // Pressing this button adds up all the values stored in the monomialValue array.            
            
             
                for(int indexMonomialValueArr = 0; indexMonomialValueArr <= 99; indexMonomialValueArr++)
                {
                    total = total + monomialValue[indexMonomialValueArr];
                }
             jTextField4.setText(String.valueOf(total));


// Next, method highestDegree is called. 
        jTextField6.setText(String.valueOf(highestDegree()));

    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
// Pressing this button clears the text in the text fields to enter the new monomial.        
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
// This button is pressed to enter a new polynomial. 
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jTextArea1.setText("");
        
 // When this button is pressed the value of variable total is reset to 0. This way the value of the previous 
//polynomial is not incorporated.        
        
        total = 0;   
        
// The statement below references the array that stores monomial values. 
// All the elements of the monomialValue array are set to 0 when this button is pressed.  
 //This is because new polynomial will consist of new monomials.  
          
        for(int indexMonomialValueArr = 0; indexMonomialValueArr <= 99; indexMonomialValueArr++ )        
            monomialValue[indexMonomialValueArr] = 0;
        
      
    }                                        
// The statement below instantiates an object of the class PolynomialUI. 
// Instantiating invokes the constructor of the class PolynomialUI. 
// The parameters passed below are listed in the same order as the arguments passed in the constructor above.     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PolynomialUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PolynomialUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PolynomialUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PolynomialUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                new PolynomialUI(coefficientValues, highestDegree, valueCoefficient, valueCoefficient0, valueVariable, valueExponent,  monomialValue).setVisible(true);
            }
// The statement above invokes the constructor of class PolynomialUI.   
        });
  
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration                   
}
