package packdrawings;
import javax.swing.JPanel;
import java.security.SecureRandom;
import java.awt.Color;
import java.awt.Graphics;
/**
 *
 * @author Jaya
 */
public class DrawPanel extends JPanel 
{
// Class DrawPanel is a container like class JPanel. Class JPanel is the superclass of class DrawPanel.    
  
    private SecureRandom randomNumbers = new SecureRandom();  
// Variables below are of type MyRectangle, MyOval, and MyLine. 
// Declared below are three seperate arrays that will store rectangles, ovals, and lines.  
    private MyRectangle[] rectangles; 
    private MyOval[] ovals;
    private MyLine[] lines;
 
// Code inside constructor gets executed when object of class DrawPanel is instantiated. 
    public DrawPanel()
    {
        setBackground(Color.ORANGE);     
   // The three statements below create 3 seperate arrays of a certain length. 
   // The length of the arrays will be generated randomly. 
        ovals = new MyOval[1 + randomNumbers.nextInt(5)];
        rectangles = new MyRectangle[1 + randomNumbers.nextInt(5)];
        lines = new MyLine[1 + randomNumbers.nextInt(5)];
 // The for statment assigns randomly generated numbers to the 4 coordinates. 
 // The lowest value of a random number that may be generated is 0.   
            for(int countIndexOval = 0; countIndexOval < ovals.length; countIndexOval++) 
                {
                    int ovalX1 = randomNumbers.nextInt(300);
                    int ovalY1 = randomNumbers.nextInt(300);
                    int ovalX2 = randomNumbers.nextInt(300);
                    int ovalY2 = randomNumbers.nextInt(300);
        
                    Color color3 = new Color(1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256));
                    ovals[countIndexOval] = new MyOval(ovalX1, ovalY1, ovalX2, ovalY2, color3, false);
// The statement above assigns values to the indexes of the array called ovals by invoking the constructor of the 
//MyOval class.        
//The color assigned to each oval will be randomly generated by passing random values to the arguments in class 
//Color's constructor.                
                }
            for(int countIndexRectangle = 0; countIndexRectangle < rectangles.length; countIndexRectangle++)
                { 
                    int rectX1 = randomNumbers.nextInt(300); 
                    int rectY1 = randomNumbers.nextInt(300);
                    int rectX2 = randomNumbers.nextInt(300);
                    int rectY2 = randomNumbers.nextInt(300);
                    Color color2 = new Color(1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256)); 
                    rectangles[countIndexRectangle] = new MyRectangle(rectX1, rectY1, rectX2, rectY2, color2, false);  
                }
        
            for(int countIndexLine = 0; countIndexLine < lines.length; countIndexLine++)
                { 
                    int lineX1 = randomNumbers.nextInt(300); 
                    int lineY1 = randomNumbers.nextInt(300);
                    int lineX2 = randomNumbers.nextInt(300);
                    int lineY2 = randomNumbers.nextInt(300);    
    
                    Color color1 = new Color(1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256), 1 + randomNumbers.nextInt(256));       
                    lines[countIndexLine] = new MyLine(lineX1, lineY1, lineX2, lineY2, color1);    
                }
    
    }
// Method paintComponent below overrides a method from the superclass. 
    public void paintComponent(Graphics g1)
    {    
// The statement below calls the method of the superclass.  
        super.paintComponent(g1);
 
 // Statements below state the enhanced for statements.
 // The values of the array called rectangles get stored in the varable called shape1. 
 // shape1 is a variable of type MyRectangle. 
 // The for statement walks thru all the elements of the array. 
 // The drawRect, drawOval, and drawLine methods are defined in classes MyRectangle, MyOval, and MyLine respectively. 
        for(MyRectangle shape1: rectangles)
            shape1.drawRect(g1);
    
        for(MyOval shape2: ovals)   
            shape2.drawOval(g1);
    
        for(MyLine shape3: lines)
            shape3.drawLine(g1);

    

    }
}






