package packCh12Assignment;



import java.awt.Color;
import java.security.SecureRandom;
import javax.swing.JPanel;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JFrame;


public class GuessNumGameUI extends javax.swing.JFrame 
{

    private SecureRandom randomNumbers = new SecureRandom();
    private int storeGeneratedNum;        
    private ArrayList<Integer> userGuesses = new ArrayList<Integer>(); 
    private int convertedUserInput;
    private static int counter;




// The constructor below sets the value of variable storeNum by calling set method setStoreNum().
// Constructor below sets the value of instance varibale convertedValue. User entry in text form is converted into
// numeric form and stored in variable convertedValue.
// The intitial background color of the container is white. 
      public GuessNumGameUI() 
        {
            initComponents();
            jTextField1.setEditable(true);
            getContentPane().setBackground(Color.WHITE);
            setGeneratedNum();
            setConvertedValue(convertedUserInput);
            setCounter(-1);
        }
      
      public void setCounter(int counter)
        {
            this.counter = counter;
        }

      public int getCounter()
        {
            return counter;
        }

// When method setStoreNum is called it generates a random number from 1 to 1000. This method stores the randomly
// generated value in variable storeNum. 
       public void setGeneratedNum()
        {
            this.storeGeneratedNum = 1 + randomNumbers.nextInt(1000);
        }
// This method retrieves the value of the instance variable storeNum.    
       public int getGeneratedNum()
        {
            return storeGeneratedNum; 
        } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(51, 0, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("I have a number between 1 and 1000. Can you guess my number?");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setText("Please enter your first guess. ");

        jTextField1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 153), 2, true));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jButton1.setText("Start Game Over");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    

        public void setConvertedValue(int convertedUserInput)
        {
            this.convertedUserInput = convertedUserInput;
        }
 
        public int getConvertedValue()
        {
            return convertedUserInput;
        }
 
 // This is the method that is called when the user presses enter in jTextField1. 
 // The user presses enter after the user has entered a new value into jTextField1. 
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
 // The value of counter increases by 1 after the 'enter' key is pressed. 
 // The intitial value of counter is set to -1 because the first index in the array is 0. 
   counter = counter + 1;
   setCounter(counter);
   jLabel4.setText("");
   jLabel6.setText("");
  
  //System.out.println("Generated number" + "  " + getGeneratedNum());
    try
    {   
// Statement below converts the value from a String into numeric form.        
        int convertedUserInput  = Integer.parseInt(jTextField1.getText());
        setConvertedValue(convertedUserInput);
        
  
     
        if(getConvertedValue() >= 1 && getConvertedValue() <= 1000)
        {
// Statement below uses method of class ArrayList to add values to userGuesses.
// userGuesses is the name of the ArrayList. 
            userGuesses.add(getConvertedValue());
//Below is the code that executes is the user enters the correct answer. 
                if(getConvertedValue() == getGeneratedNum())
                {
                    jTextField1.setEditable(false);
// The place where the user inputs their entry is not editable any more. 
                    jLabel3.setText("Correct!");
                    jLabel5.setText("");
                    jLabel4.setText("Number of tries taken to get the correct answer: " + (getCounter() + 1));
                    getContentPane().setBackground(Color.yellow);
// A colorful picture on a new JFrame is displayed if user enters the correct answer.                      
                    JFrame application = new JFrame();
// An image icon is attached to a label. Then the label is attached to the JFrame. 
// When a new object of class ImageIcon is created, the name of the file is specified. 
// This file contains the image to be displayed on the JFrame. 
                    ImageIcon labelIcon = new ImageIcon(getClass().getResource("Colors.png"));
                    JLabel centerLabel = new JLabel(labelIcon);
                    application.add(centerLabel);
                    application.setVisible(true);
                    application.setSize(500,500);
   
                }
     
            
     
                if((getConvertedValue() < getGeneratedNum()) | (getConvertedValue() > getGeneratedNum()))
                {
                
                    jLabel3.setText("Incorrect guess. Please enter another number again in that same box.");
                    if(getConvertedValue() < getGeneratedNum())
                        jLabel5.setText("Your entry is too low");
                    if(getConvertedValue() > getGeneratedNum())
                        jLabel5.setText("Your entry is too high");
            
                    try
                    {
                        if(getCounter() != 0)
                        {   
// The 2 statements below get the difference between user entry and the correct answer.
// This difference is calculated for the current index and for the previous index. 
// I'm finding out the difference between the latest user entry to the random generated number. 
// Also, I'm findng out the difference between previous user entry, which is stored in ArrayList
// and the random generated number. 
                            int diffCurrent = Math.abs((userGuesses.get(getCounter())) - getGeneratedNum());
                            int diffPrevious = Math.abs((userGuesses.get((getCounter()) - 1)) - getGeneratedNum());
// The background color is determined based on which comparison has a greater difference. 
// If the element at the previous index is closer to the correct answer, the user is getting colder. 
                            if(diffCurrent < diffPrevious)
                            {
                                getContentPane().setBackground(Color.RED);
                                
                            }
                    
                 
                            else
                            {
                                getContentPane().setBackground(Color.BLUE);
                                
                            }   
            
                        } 
        
                    
                    }
                catch(IndexOutOfBoundsException ex)
                 {
                   System.out.println("In the catch block corresponding to IndexOutOfBoundException");
                   System.out.println("Value of counter which represents array index: " + getCounter());
                   System.out.println(userGuesses.get(getCounter()));
                   
                   
                 }
                   
                 
        } 
      
  }
     
 
        if((getConvertedValue() < 1) || (getConvertedValue() > 1000))
        {   
        
            jLabel6.setText("Your entry must be a number from 1 to 1000");
            jLabel3.setText("");
            jLabel5.setText("");
            getContentPane().setBackground(Color.WHITE);
            
        } 
    
    }  // ending bracket for the try block
// If the above code throws an exception, it is caught in the block below.     
    catch(NumberFormatException e)
    {    
        counter = counter -1;
        setCounter(counter);
        jLabel6.setText("Your entry must must be in numeric form");
        jLabel3.setText("");
        jLabel5.setText("");  
        getContentPane().setBackground(Color.WHITE);
        
    }
    
  
    
   
  
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        jTextField1.setEditable(true);
        getContentPane().setBackground(Color.WHITE);
// Statement below generates a new random number.         
        setGeneratedNum();
//        System.out.println("Second generated random number is " + getGeneratedNum());
// The ArrayList is discarded of any values from the earlier round of the game.         
        userGuesses.clear();
        counter = -1;
        setCounter(counter);
        jLabel3.setText("");
        jLabel5.setText("");
        jLabel4.setText("");
        jTextField1.setText("");
       
        
    }                                        

                                          


    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
 
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuessNumGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuessNumGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuessNumGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuessNumGameUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
           
                 new GuessNumGameUI().setVisible(true);
                 
            }
        });
    
    
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
    
    

}
